[{"title":"Code Server","url":"/posts/2025/07/code-server/","content":"在 Ubuntu 16.04 Server 上安装 code-server（Web 版 VSCode）的步骤如下1. 使用.deb 包安装对于 Ubuntu 16.04系统，推荐通过.deb 包来安装 code-server，这样能避免 npm 安装时出现的权限问题：\n# 获取最新版本的下载链接（请替换为实际的最新版本）VERSION=4.14.1wget https://github.com/coder/code-server/releases/download/v$VERSION/code-server_$&#123;VERSION&#125;_amd64.deb# 安装.deb包sudo dpkg -i code-server_$&#123;VERSION&#125;_amd64.deb# 修复依赖（如果有缺失的依赖）sudo apt-get install -f\n\n持久化运行 code-server\n如果你使用的是.deb 包安装的 code-server，建议通过 systemd 管理服务：\n# 设置服务开机自启sudo systemctl enable code-server@$USER# 启动服务sudo systemctl start code-server@$USER# 查看服务状态sudo systemctl status code-server@$USER\n\n修改配置文件\n#使用 Node.js 内置的 crypto 模块生成哈希密码：nano ~/.config/code-server/config.yaml\n\n推荐配置示例：\nbind-addr: 0.0.0.0:8080       # 允许外部访问，注意安全组设置auth: password                 # 认证方式password: your_strong_password # 强密码cert: false                     # 启用HTTPS（需要证书）\n\n# 重载 Systemdsudo systemctl daemon-reload# 启动服务sudo systemctl restart code-server\n\n常见问题解决其他安装1. 安装 Node.js 16.xcode-server 依赖 Node.js 12+，但 Ubuntu 16.04 的默认仓库版本过低，需通过 NodeSource 安装：\n# 添加 NodeSource 仓库curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -# 安装 Node.js 和 npmsudo apt-get install -y nodejs\n\n验证版本：\nnode -v  # 应输出 v16.x.xnpm -v   # 应输出 8.x.x\n\n\n2. 安装 code-server使用 npm 全局安装最新稳定版：\nsudo npm install -g --unsafe-perm code-server@4.14.1\n\n注意：选择 4.14.1 版本是为了兼容 Ubuntu 16.04 的较旧依赖环境。\n3. 配置 code-server创建配置目录并生成默认配置文件：\nmkdir -p ~/.config/code-servercode-server --config ~/.config/code-server/config.yaml\n\n编辑配置文件：\nnano ~/.config/code-server/config.yaml\n\n修改内容如下（示例）：\nbind-addr: 0.0.0.0:8080  # 监听所有 IP，端口 8080auth: password           # 密码认证password: your_password  # 改为强密码cert: false              # 暂不使用 HTTPS\n\n4. 创建 Systemd 服务创建服务文件以便后台运行：\nsudo nano /etc/systemd/system/code-server.service\n\n内容如下（替换 your_username 为你的用户名）：\n[Unit]Description=code-serverAfter=networking.service[Service]Type=simpleUser=userEnvironment=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/loca$ExecStart=/usr/bin/code-server --config /home/your_username/.config/code-server/config.yamlRestart=always[Install]WantedBy=multi-user.target\n\n5. 启动服务并设置开机自启# 重载 Systemdsudo systemctl daemon-reload# 启动服务sudo systemctl start code-server# 设置开机自启sudo systemctl enable code-server\n\n6. 配置防火墙（如果启用）sudo ufw allow 8080sudo ufw reload\n\n7. 访问 Web 界面http://服务器IP:8080\n\n输入配置的密码登录。\n","categories":["AI"],"tags":["code-server"]},{"title":"Hello World","url":"/posts/2025/07/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new posthexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun serverhexo server\n\n\nMore info: Server\nGenerate static fileshexo generate\n\nMore info: Generating\nDeploy to remote siteshexo deploy\n\nMore info: Deployment\n","categories":["Hexo"],"tags":["hello-world"]},{"title":"Hexo Next","url":"/posts/2025/07/hexo-next/","content":"安装一、安装 Hexo 环境安装 Node.js\nhttps://deb.nodesource.com/setup_16.x — Node.js 16 “Gallium” (deprecated)\nhttps://deb.nodesource.com/setup_18.x — Node.js 18 “Hydrogen” (Maintenance)\nhttps://deb.nodesource.com/setup_19.x — Node.js 19 “Nineteen” (deprecated)\nhttps://deb.nodesource.com/setup_20.x — Node.js 20 LTS “Iron” (recommended)\nhttps://deb.nodesource.com/setup_21.x — Node.js 21 “Iron” (current)\n\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -  # 推荐20.x  sudo apt install -y nodejsnode -v  # 验证版本≥20\n\n\n二、创建 Hexo 博客安装 Hexo CLIsudo npm install hexo-cli -ghexo -v  # 验证安装\n\n创建 Hexo 博客hexo init myblog &amp;&amp; cd myblognpm install  # 安装依赖\n\n安装 Next 主题git clone https://github.com/next-theme/hexo-theme-next themes/next\n\n三、配置 Next 主题修改 Hexo 主配置编辑nano _config.yml：\n# 基本信息title: XXX’s Blogsubtitle: &#x27;&#x27;author: XXXlanguage: zh-CNtimezone: Asia/Shanghai# 主题设置theme: next# URL设置（替换为你的域名）url: http://XXX# 永久链接格式permalink: posts/:year/:month/:title/# 部署配置（后续使用Nginx部署） deploy:  type: rsync  host: XXX  user: root  root: /var/www/myblog  port: 22  delete: true  verbose: true  ignore_errors: false  args: --exclude=.DS_Store --exclude=*.tmp  # 排除临时文件  timeout: 60  # 增加超时时间\n\n  本地测试运行‌\nhexo c &amp;&amp; hexo g &amp;&amp; hexo s\n\n访问 http://localhost:4000 检查主题生效\n自定义 Next 主题编辑nano themes&#x2F;next&#x2F;_config.yml：\n# 主题风格（可选Muse/Mist/Pisces/Gemini）scheme: Gemini# 菜单配置menu:  home: / || home  archives: /archives/ || archive  categories: /categories/ || th  tags: /tags/ || tags  about: /about/ || user  search: /search/ || search# 侧边栏配置sidebar:  position: left  display: always# 社交链接social:  GitHub: https://github.com/your_username || github  Twitter: https://twitter.com/your_username || twitter  LinkedIn: https://linkedin.com/in/your_username || linkedin# 评论系统（示例：使用Gitalk）comments:  active: gitalk  gitalk:    clientID: your_client_id    clientSecret: your_client_secret    repo: your_repo    owner: your_username    admin: [&#x27;your_username&#x27;]\n\nhexo new page categorieshexo new page tagshexo new page about\n\n四、安装并配置 Nginx安装 Nginxsudo apt updatesudo apt install nginx -ysudo systemctl start nginxsudo systemctl enable nginx\n\n配置 Nginx 虚拟主机创建配置文件：\nsudo nano /etc/nginx/sites-available/myblog\n\n  添加以下内容（替换为你的域名）：\n server &#123;    listen 80;    server_name  XXX;  # 替换为你的域名    root /var/www/myblog;    index index.html index.htm;    location / &#123;        try_files $uri $uri/ /index.html;        gzip on;        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;    &#125;&#125;\n\n启用配置：\nsudo ln -s /etc/nginx/sites-available/myblog /etc/nginx/sites-enabled/sudo nginx -t  # 验证配置\n\n五、部署手动部署npm install hexo-deployer-rsync --save# 使用sudo以root权限创建目录sudo mkdir -p /var/www/myblog# 修改目录所有者为当前用户（如ubuntu）sudo chown -R ubuntu:www-data /var/www/myblog# 设置适当的权限sudo chmod -R 755 /var/www/myblog  hexo d # 将文件复制到/var/www/html/（根据deploy配置）\n\n六、 优化头像编辑nano themes&#x2F;next&#x2F;_config.yml：\nfavicon:  small: /images/favicon.png  # 小图标（16x16）  medium: /images/favicon.png  # 中图标（32x32）  apple_touch_icon: /images/favicon.png  # Apple 设备图标  safari_pinned_tab: /images/favicon.png  # Safari 固定标签页图标  #small: /images/favicon-16x16-next.png  #medium: /images/favicon-32x32-next.png  #apple_touch_icon: /images/apple-touch-icon-next.png  #safari_pinned_tab: /images/logo.svg  #android_manifest: /manifest.json\n\n把头像文件放在 myblog&#x2F;source&#x2F;images 下\n打赏# Donate (Sponsor) settings# Front-matter variable (nonsupport animation).reward_settings:  # If true, a donate button will be displayed in every article by default.  enable: true  animation: truereward:  wechatpay: /images/wechatpay.png  #alipay: /images/alipay.png  #paypal: /images/paypal.png  #bitcoin: /images/bitcoin.png\n\n把图片文件放在 myblog&#x2F;themes&#x2F;next&#x2F;source&#x2F;images 下\nHexo NexT 本地搜索npm install hexo-generator-searchdb --save\n\n配置站点文件\n编辑 myblog&#x2F;themes&#x2F;next 下配置文件 _config.yml，新增以下内容：\nsearch:path: search.xmlfield: postformat: htmllimit: 10000\n\n配置主题文件\n编辑主题配置文件 _config.yml，启用本地搜索功能：\n# Local search# Dependencies: https://github.com/next-theme/hexo-generator-searchdblocal_search:enable: true\n\n禁用 Algolia 搜索\n如果 Algolia 搜索和本地搜索同时启用，可能会导致冲突。可以在主题配置文件中禁用 Algolia 搜索：\nalgolia_search:enable: false\n\n完成以上步骤后，重新生成并部署站点：\nhexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; hexo s\n\n这样就可以在 Hexo 的 NexT 主题中使用本地搜索功能了\n懒加载编辑 nano themes&#x2F;next&#x2F;_config.yml：\nlazyload: true\n\n图片懒加载\nnpm install hexo-lazyload-image --save\n\n编辑 nano _config.yml：\nlazyload:  enable: true  # 启用懒加载  onlypost: false  # 是否只对文章中的图片生效  loadingImg: &quot;&quot;  # 自定义加载中的占位图路径  errorImg: &quot;&quot;  # 图片加载失败时显示的图片路径  quality: 80  # 图片质量（仅对生成的响应式图片有效）\n\n增加站点访客、文章阅读量、字符统计、阅读时间统计与对应词条翻译字符统计、阅读时间统计npm install hexo-symbols-count-time --save\n\n编辑 nano _config.yml：\nsymbols_count_time:  symbols: true                # 文章字数统计  time: true                   # 文章阅读时长  total_symbols: true          # 站点总字数统计  total_time: true             # 站点总阅读时长  exclude_codeblock: false     # 排除代码字数统计\n\n编辑 nano themes&#x2F;next&#x2F;_config.yml：\n# Post wordcount display settings# Dependencies: https://github.com/next-theme/hexo-word-countersymbols_count_time:  separated_meta: false  item_text_total: true\n\n分类和标签生成分类页面\nhexo new page &quot;categories&quot;\n\n生成后，编辑 source&#x2F;categories&#x2F;index.md 文件，添加以下内容：\n---title: 分类date: YYYY-MM-DD HH:MM:SStype: &quot;categories&quot;layout: &quot;categories&quot;---\n\n生成标签页面\nhexo new page &quot;tags&quot;\n\n生成后，编辑 source&#x2F;tags&#x2F;index.md 文件，添加以下内容：\n---title: 标签date: YYYY-MM-DD HH:MM:SStype: &quot;tags&quot;layout: &quot;tags&quot;---\n\n在菜单中添加链接编辑主题配置文件 themes&#x2F;next&#x2F;_config.yml，找到 menu 字段，添加分类和标签的菜单链接：\nmenu:  home: / || home  categories: /categories/ || th-large  # th-large 是 Font Awesome 图标类名  tags: /tags/ || tags\n\n在撰写文章时，通过 Front-matter 配置分类和标签：\n---title: &quot;Hexo Next 主题配置指南&quot;date: 2025-07-02 10:00:00categories: 技术 # 分类（可多层级，如 &quot;技术/Hexo&quot;）tags:- Hexo- Next主题- 博客搭建---文章内容...\n\n多层级分类示例：categories: 技术&#x2F;博客&#x2F;Hexo，会生成层级结构 技术 &gt; 博客 &gt; Hexo。标签格式：可使用数组格式（如上）或逗号分隔（如 tags: Hexo, Next主题, 博客搭建）。\nHexo 分页设置在 Hexo 中设置分页可以让你的博客更易于浏览。你可以通过修改配置文件 _config.yml 来实现分页功能。\n示例\n首先，确保你已经安装了必要的插件：\nnpm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-tag --save\n\n然后，在你的主题配置文件 _config.yml 中进行如下修改：\n# 主页每页显示文章数index_generator:per_page: 5# 归档分页每页显示文章数archive_generator:per_page: 5# 标签分页每页显示文章数tag_generator:per_page: 10# 分类分页每页显示文章数category_generator:per_page: 10\n\n注意事项\n插件安装：确保你已经安装了 hexo-generator-index、hexo-generator-archive 和 hexo-generator-tag 插件。\n配置文件：在 _config.yml 文件中正确设置 per_page 参数，以控制每页显示的文章数量。\n通过以上步骤，你可以轻松地在 Hexo 博客中实现分页功能，使你的博客更加整洁和易于导航\n主题设置知识共享NexT 支持在侧边栏和帖子中显示 Creative Commons 4.0 International License，包括 by 、 、 by-nc by-nc-nd 、 by-nc-sa by-nd by-sa 和 cc-zero 。这些许可证允许创建者告知他们保留了哪些权利，以及他们为了接收者或其他创建者的利益而放弃了哪些权利。\n您可以通过编辑 NexT 配置文件中 section 中的 creative_commons 值来配置它，例如：\n# Creative Commons 4.0 International License.# See: https://creativecommons.org/about/cclicenses/creative_commons:  # Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero  license: by-nc-sa  # Available values: big | small  size: big  sidebar: true  post: false  # You can set a language value if you prefer a translated version of CC license, e.g. deed.zh  # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org  language: deed.zh-hans\n\n将值 badges 设置为 true 显示 NexT 配置文件 menu_settings 中菜单项中 Posts &#x2F; Categories &#x2F; Tags 的计数，如下所示\nNexT 配置文件\n# Enable / Disable menu icons / item badges.menu_settings:  icons: true  badges: true\n\n返回页首\nNexT 配置文件\n back2top:  enable: true  # Back to top in sidebar.  sidebar: false  # Scroll percent label in b2t button.  scrollpercent: true\n\nGitHub 横幅NexT 在右上角提供 Follow me on GitHub 横幅。\nNexT 配置文件\n# Follow me on GitHub banner in right-top corner.github_banner:  enable: true  permalink: https://github.com/yourname\n\n\n参考：theme-next\n\n","categories":["Hexo"],"tags":["hexo-next"]},{"title":"Jupyter Notebook","url":"/posts/2025/07/jupyter-notebook/","content":"在 Ubuntu 16.04 Server 上安装 Jupyter Notebook，可以按照以下步骤进行1. 更新系统软件包首先更新系统的软件包列表和已安装的软件包：\nsudo apt-get updatesudo apt-get upgrade -y\n\n2. 安装 Python 和 pipJupyter Notebook 依赖于 Python，Ubuntu 16.04 默认安装了 Python 2.7 和 Python 3.5，这里建议安装 Python 3.6 和 pip3.6：\n#添加 deadsnakes PPA 仓库sudo add-apt-repository ppa:deadsnakes/ppasudo apt-get update#安装 Python 3.6 和 pip 工具sudo apt-get install python3.6 python3.6-pip -y\n\n\n若上述方法找不到python3.6，你可以从源码编译安装 Python 3.6\n# 安装编译依赖sudo apt-get install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget# 安装SQLite开发库和编译依赖sudo apt-get install -y libsqlite3-dev sqlite3 build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev# 下载并解压源码wget https://www.python.org/ftp/python/3.6.15/Python-3.6.15.tgztar -xf Python-3.6.15.tgzcd Python-3.6.15# 配置并编译# 重新配置并编译（保留原有配置，添加sqlite支持）./configure --enable-optimizations --with-system-ffi --with-computed-gotosmake -j$(nproc)sudo make altinstall\n\n#设置默认 Python 版本cdsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1sudo update-alternatives --install /usr/bin/python3 python3 /usr/local/bin/python3.6 2sudo update-alternatives --config python3\n\n3. pip3 换清华源使用 Python 3.6，若不兼容，你可以尝试重新安装兼容版本的 pip。\n# 删除当前有问题的pippython3.6 -m pip uninstall pip# 安装兼容版本的pipcurl https://bootstrap.pypa.io/pip/3.6/get-pip.py -o get-pip.pypython3.6 get-pip.py\n\n升级 pip 到最新的版本后进行配置：\npython3 -m pip install -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple --upgrade pip#设置默认pip config set global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple\n\n4. 使用 pip 安装 Jupyter Notebook使用 pip3 安装 Jupyter Notebook：\nsudo pip3 install jupyter notebooksudo chown -R $USER:$USER /usr/local/share/jupyter\n\n5. 配置 Jupyter Notebook生成 Jupyter 配置文件：\njupyter notebook --generate-config\n\n创建 Jupyter Notebook 密码（会生成加密后的密码）：\njupyter notebook password\n\n6. 创建 Systemd 服务为了方便管理 Jupyter Notebook 服务，创建一个 systemd 服务文件：\nsudo nano /etc/systemd/system/jupyter.service\n\n在文件中添加以下内容：\n[Unit]Description=Jupyter NotebookAfter=network.target[Service]User=your_username  # 替换为你的用户名Group=your_username  # 替换为你的用户名WorkingDirectory=/home/your_username  # 替换为你的主目录ExecStart=/usr/local/bin/jupyter notebook --config=/home/your_username/.jupyter/jupyter_notebook_config.py[Install]WantedBy=multi-user.target\n\n7. 启动 Jupyter Notebook 服务重载 systemd 管理器配置：\nsudo systemctl daemon-reload\n\n启动 Jupyter Notebook 服务：\nsudo systemctl start jupyter\n\n设置开机自启动：\nsudo systemctl enable jupyter\n\n8. 配置防火墙如果服务器启用了防火墙，需要开放 Jupyter Notebook 默认端口（8888）：\nsudo ufw allow 8888\n\n9. 配置# 1. 备份并重新生成配置文件cp ~/.jupyter/jupyter_notebook_config.py ~/.jupyter/jupyter_notebook_config.py.bakjupyter notebook --generate-config --allow-root# 2. 设置密码jupyter notebook password# 3. 修改配置文件nano ~/.jupyter/jupyter_notebook_config.py\n\nc.NotebookApp.ip = &#x27;0.0.0.0&#x27; #your_server_ipc.NotebookApp.open_browser = Falsec.NotebookApp.port = 8888c.NotebookApp.root_dir = &#x27;/path/to/your/directory&#x27;c.ServerApp.allow_origin = &#x27;*&#x27;  # 允许所有域名访问c.ServerApp.allow_credentials = Truec.ServerApp.disable_check_xsrf = True  # 禁用XSRF保护（谨慎使用）在配置文件中添加 / 修改以下行：\n\n验证# 检查服务状态sudo systemctl status jupyter# 查看日志journalctl -u jupyter -f\n\n10. 访问 Jupyter Notebook在浏览器中访问：http://your_server_ip:8888\n\n输入之前设置的密码，即可登录 Jupyter Notebook。\n注意事项\n建议使用 HTTPS 访问 Jupyter Notebook，可以通过配置 SSL 证书实现。\n可以修改 Jupyter 配置文件（~&#x2F;.jupyter&#x2F;jupyter_notebook_config.py）来自定义更多选项，如监听地址、端口等。\n如果需要在后台运行 Jupyter Notebook，可以使用nohup命令或配置为服务。\n\n如果安装过程中遇到权限问题，可能需要使用sudo -H pip3 install jupyter来确保正确安装。\n","categories":["AI"],"tags":["jupyter-notebook"]},{"title":"Mark Down","url":"/posts/2025/07/markdown/","content":"教程这是一篇讲解如何正确使用 Markdown 的排版示例，学会这个很有必要，能让你的文章有更佳清晰的排版。\n\n引用文本：Markdown is a text formatting syntax.\n\n语法指导普通内容这段内容展示了在内容里面一些排版格式，比如：\n\n加粗 - **加粗**\n倾斜 - *倾斜*\n删除线 - ~~删除线~~\nCode 标记 - `Code 标记`\n超级链接 - [超级链接](https://lddgo.net)\nusername@gmail.com - [username@gmail.com](mailto:username@gmail.com)\n\n\n\n大标题 - Heading 3你可以选择使用 H1 至 H6，使用 ##(N) 打头。\n\nNOTE: 别忘了 # 后面需要有空格！\n\nHeading 4Heading 5Heading 6图片![alt 文本](http://image-path.png)![alt 文本](http://image-path.png &quot;图片 Title 值&quot;)\n\n代码块普通*emphasize*    **strong**_emphasize_    __strong__var a = 1\n\n语法高亮支持如果在 &#96;&#96;&#96; 后面跟随语言名称，可以有语法高亮的效果哦，比如:\n演示 Go 代码高亮package mainimport &quot;fmt&quot;func main() &#123; fmt.Println(&quot;Hello, 世界&quot;)&#125;\n\n演示 Java 高亮public class HelloWorld &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;Hello World!&quot;);    &#125;&#125;\n\n\nTip: 语言名称支持下面这些: ruby, python, js, html, erb, css, coffee, bash, json, yml, xml …\n\n有序、无序、任务列表无序列表\nJava\nSpring\nIoC\nAOP\n\n\n\n\nGo\ngofmt\nWide\n\n\nNode.js\nKoa\nExpress\n\n\n\n有序列表\nNode.js\nExpress\nKoa\nSails\n\n\nGo\ngofmt\nWide\n\n\nJava\nLatke\nIDEA\n\n\n\n任务列表\n 发布 任务1\n 发布 任务2\n 预约 任务3\n\n表格如果需要展示数据什么的，可以选择使用表格。\n\n\n\nheader 1\nheader 2\n\n\n\ncell 1\ncell 2\n\n\ncell 3\ncell 4\n\n\ncell 5\ncell 6\n\n\n隐藏细节\n这里是摘要部分。\n这里是细节部分。\n\n\n段落空行可以将内容进行分段，便于阅读。（这是第一段）\n使用空行在 Markdown 排版中相当重要。（这是第二段）\n链接引用链接文本\nLDDGO.NET\nMarkdown 教程\n[链接文本](链接地址)\n\n数学公式\n\n设置\n\n编辑 nano &#x2F;themes&#x2F;next&#x2F;_config.yml\nmathjax:  enable: true  # Available values: none | ams | all  tags: none\n\n编辑 nano markdown.md\n---title: Markdownauthor: Ma Jiangdate: 2025-07-02 16:04:08tags: Markdownmathjax: true---\n\n\n\n多行公式块：\n$$\\frac{1}{  \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{  \\frac25 \\pi}} &#x3D; 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {    1+\\frac{e^{-6\\pi}}    {1+\\frac{e^{-8\\pi}}{1+\\cdots}}  }}$$\n行内公式：\n公式 $a^2 + b^2 &#x3D; color{red}c^2$ 是行内。\n脑图Mermaid\n\n\n设置\n\nNexT config file\n# Mermaid tagmermaid:  enable: true  # Available themes: default | dark | forest | neutral  theme:    light: default    dark: dark\n\nHexo config file\nhighlight:  exclude_languages:    - mermaid\n\nUsage\n&#123;% mermaid type %&#125;&#123;% endmermaid %&#125;\n\nor\n`` `  mermaid  type`` `\n\n\n\nmindmap\n 教程\n   语法指导\n   普通内容\n   大标题\n     Heading 3\n     Heading 4\n       Heading 5\n         Heading 6\n   图片\n   代码块\n     普通\n     语法高亮支持\n       演示 Go 代码高亮\n       演示 Java 高亮\n   有序、无序、任务列表\n     无序列表\n     有序列表\n     任务列表\n   表格\n   隐藏细节\n   段落\n   链接引用\n   数学公式\n   脑图\n   流程图\n   时序图\n   甘特图\n   图表\n   五线谱\n   Graphviz\n   脚注\n\n流程图graph TD\nc1--&gt;a2\n    subgraph one\n    a1--&gt;a2\n    end\n    subgraph two\n    b1--&gt;b2\n    end\n    subgraph three\n    c1--&gt;c2\n    end\n\n时序图sequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    loop Every minute\n        John--&gt;&gt;Alice: Great!\n    end\n\n甘特图gantt\n\ntitle A Gantt Diagram\n    dateFormat  YYYY-MM-DD\n    section Section\n    A task           :a1, 2019-01-01, 30d\n    Another task     :after a1  , 20d\n    section Another\n    Task in sec      :2019-01-12  , 12d\n    another task      : 24d\n\n\n图表饼图pie\n&quot;Dogs&quot; : 386\n&quot;Cats&quot; : 85\n&quot;Rats&quot; : 15\n\n\nFlowchartflowchart TD\n    A[Start] --&gt; B&#123;Is it?&#125;\n    B -- Yes --&gt; C[OK]\n    C --&gt; D[Rethink]\n    D --&gt; B\n    B -- No ----&gt; E[End]\n\n\nGraphviz\n\n设置\n\nhexo-graphvizPlugin for Hexo which renders Graphviz plots\nInstallationInstall Packageyarn add hexo-graphviz\n\nEdit ConfigAfter installed, you should edit hexo config file: _config.yml:\n# hexo-graphvizgraphviz:  enable: true\n\nInclude viz.js in njkAfter editing _config.yml, you shoud be able to edit your blog page component like after-footer.ejs or a njk file which can be found inside the themes/layout/_partials/ directory.\nThe following code should be added in the file footer.njk:\n&#123;% if theme.graphviz.enable %&#125;  &lt;script src=&#x27;https://cdnjs.cloudflare.com/ajax/libs/viz.js/1.7.1/viz.js&#x27;&gt;&lt;/script&gt;  &lt;script&gt;    String.prototype.replaceAll = function(search, replacement) &#123;      var target = this;      return target.split(search).join(replacement);    &#125;;    let vizObjects = document.querySelectorAll(&#x27;.graphviz&#x27;)    for (let item of vizObjects) &#123;      let svg = undefined      try &#123;        svg = Viz(item.textContent.replaceAll(&#x27;–&#x27;, &#x27;--&#x27;), &#x27;svg&#x27;)      &#125; catch(e) &#123;        svg = `&lt;pre class=&quot;error&quot;&gt;$&#123;e&#125;&lt;/pre&gt;`      &#125;      item.outerHTML = svg    &#125;  &lt;/script&gt;&#123;% endif %&#125;\n\nUsageThe graphviz block can be written inside a  graphviz  codeblock.\n\n\ndigraph finite_state_machine &#123;    rankdir=LR;    size=&quot;8,5&quot;    node [shape = doublecircle]; S;    node [shape = point ]; qi    node [shape = circle];    qi -&gt; S;    S  -&gt; q1 [ label = &quot;a&quot; ];    S  -&gt; S  [ label = &quot;a&quot; ];    q1 -&gt; S  [ label = &quot;a&quot; ];    q1 -&gt; q2 [ label = &quot;ddb&quot; ];    q2 -&gt; q1 [ label = &quot;b&quot; ];    q2 -&gt; q2 [ label = &quot;b&quot; ];&#125;\n\n五线谱\n设置\n\nhexo-tag-abcjs\nHelps you to render standard music notation with abcjs on your blog posts\n\nInstallnpm install --save hexo-tag-abcjs\n\nConfigurationYou can configure this plugin in _config.yml.\nabcjs:  js: &#x27;/js/abcjs_midi_5.9.1-min.js&#x27;,  css: &#x27;/css/abcjs-midi.css&#x27;,  midi: true,  animation: true,  animationColors: [&#x27;#000000&#x27;, &#x27;#3d9afc&#x27;]  options: &#123;    startingTune: 0,    print: false,    visualTranspose: 0,    scale: 1,    responsive: &#x27;resize&#x27;,    inlineControls: &#123;      loopToggle: true,      standard: true,      tooltipLoop: &#x27;Click to toggle play once/repeat.&#x27;,      tooltipReset: &#x27;Click to go to beginning.&#x27;,      tooltipPlay: &#x27;Click to play/pause.&#x27;,      tooltipProgress: &#x27;Click to change the playback position.&#x27;    &#125;  &#125;,  scriptId: &#x27;hexo-tag-abcjs&#x27;\n\n\njs - The abcjs library url. default: /js/abcjs_midi_5.9.1-min.js\ncss - The abcjs style url. default: /css/abcjs-midi.css\nmidi - Whether enable midi audio. default: true\nanimation - Whether enable absjs animation. When true, highlights the current notation. default: true\nanimationColors - The animated notation color. default: [&#39;#000000&#39;, &#39;#3d9afc&#39;]\noptions - The abcjs Configuration. default as above\nscriptId - The id of inserted script tag. default: hexo-tag-abcjs\n\nUsage&#123;% abcjs [autoplay] [no-midi] [no-animation] %&#125;here is your abcString&#123;% endabcjs %&#125;\n\n\nautoplay - Enable autoplay\nno-midi - Disabled midi audio\nno-animation - Disabled audio animation\n\nExampleThe following is a simple demo:\n&#123;% abcjs autoplay %&#125;X: 22T:Money LostM:3/4L:1/8Q:1/4=100C:Paul RosenS:Copyright 2007, Paul RosenR:KlezmerK:DmAde|:&quot;Dm&quot;(f2d)e gf|&quot;A7&quot;e2^c4|&quot;Gm&quot;B&gt;&gt;^c BA BG|&quot;A&quot;A3Ade|&quot;Dm&quot;(f2d)e gf|&quot;A7&quot;e2^c4|&quot;Gm&quot;A&gt;&gt;B &quot;A7&quot;AG FE|1&quot;Dm&quot;D3Ade:|2&quot;Dm&quot;D3DEF||:&quot;Gm&quot;(G2D)E FG|&quot;Dm&quot;A2F4|&quot;Gm&quot;B&gt;&gt;c &quot;A7&quot;BA BG|&quot;Dm&quot;A3 DEF|&quot;Gm&quot;(G2D)EFG|&quot;Dm&quot;A2F4|&quot;E°&quot;E&gt;&gt;Fy &quot;(A7)&quot;ED^C2|1&quot;Dm&quot;D3DEF:|2&quot;Dm&quot;D6||&#123;% endabcjs %&#125;\n\n\n\nX: 24T: Clouds ThickenC: Paul RosenS: Copyright 2005, Paul RosenM: 6/8L: 1/8Q: 3/8=116R: Creepy JigK: Em|:&quot;Em&quot;EEE E2G|&quot;C7&quot;_B2A G2F|&quot;Em&quot;EEE E2G|&quot;C7&quot;_B2A &quot;B7&quot;=B3|&quot;Em&quot;EEE E2G|&quot;C7&quot;_B2A G2F|&quot;Em&quot;GFE &quot;D (Bm7)&quot;F2D|1&quot;Em&quot;E3-E3:|2&quot;Em&quot;E3-E2B|:&quot;Em&quot;e2e gfe|&quot;G&quot;g2ab3|&quot;Em&quot;gfeg2e|&quot;D&quot;fedB2A|&quot;Em&quot;e2e gfe|&quot;G&quot;g2ab3|&quot;Em&quot;gfe&quot;D&quot;f2d|&quot;Em&quot;e3-e3:|\n\n脚注这里是一个脚注引用^1，这里是另一个脚注引用^bignote。\n缩进对齐的段落包含在这个脚注定义内。\n可以使用代码块。\n\n还有其他行级排版语法，比如加粗和链接。\n这里是一个脚注引用[^1]，这里是另一个脚注引用[^bignote]。    缩进对齐的段落包含在这个脚注定义内。    `` `可以使用代码块。    `` `    还有其他行级排版语法，比如**加粗**和[链接](https://lddgo.net)。\n","categories":["Markdown"],"tags":["mark-down"]},{"title":"Waline","url":"/posts/2025/07/waline/","content":"Waline欢迎使用 Waline，只需几个步骤，你就可以在你的网站中启用 Waline 提供评论与浏览量服务。\nLeanCloud 设置 (数据库)1. 登录 或 注册 LeanCloud 国际版 并进入 控制台2. 点击左上角 创建应用并起一个你喜欢的名字 (请选择免费的开发版)3. 进入应用，选择左下角的 设置 &gt; 应用 Key。你可以看到你的 APP ID,APP Key 和 Master Key。请记录它们，以便后续使用国内版需要完成备案接入\n如果你正在使用 Leancloud 国内版 (leancloud.cn)，我们推荐你切换到国际版 (leancloud.app)。否则，你需要为应用额外绑定已备案的域名，同时购买独立 IP 并完成备案接入:\n登录国内版并进入需要使用的应用选择 设置 &gt; 域名绑定 &gt; API 访问域名 &gt; 绑定新域名 &gt; 输入域名 &gt; 确定。按照页面上的提示按要求在 DNS 上完成 CNAME 解析。购买独立 IP 并提交工单完成备案接入。(独立 IP 目前价格为 ￥ 50&#x2F;个&#x2F;月)\n\n\n\n\nVercel 部署 (服务端) Deploy Vercel\n1. 点击上方按钮 ，跳转至 Vercel 进行 Server 端部署点击上方按钮，跳转至 Vercel 进行 Server 端部署。\n注\n如果你未登录的话，Vercel 会让你注册或登录，请使用 GitHub 账户进行快捷登录。\n\n\n2. 输入一个你喜欢的 Vercel 项目名称并点击 Create 继续3.此时 Vercel 会基于 Waline 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名一两分钟后，满屏的烟花会庆祝你部署成功。此时点击 Go to Dashboard 可以跳转到应用的控制台。\n4.点击顶部的 Settings - Environment Variables 进入环境变量配置页，并配置三个环境变量 LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY 。它们的值分别对应上一步在 LeanCloud 中获得的 APP ID, APP KEY, Master Key注\n如果你使用 LeanCloud 国内版，请额外配置 LEAN_SERVER 环境变量，值为你绑定好的域名。\n\n\n5.环境变量配置完成之后点击顶部的 Deployments 点击顶部最新的一次部署右侧的 Redeploy 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效6. 此时会跳转到 Overview 界面开始部署，等待片刻后 STATUS 会变成 Ready。此时请点击 Visit ，即可跳转到部署好的网站地址，此地址即为你的服务端地址绑定域名 (可选)1. 点击顶部的 Settings - Domains 进入域名配置页2.输入需要绑定的域名并点击 Add在域名服务器商处添加新的 CNAME 解析记录\n3. 在域名服务器商处添加新的 CNAME 解析记录\n\n\nType 1\nName 2\nValue\n\n\n\nCNAME 1\nexample 2\ncname.vercel-dns.com\n\n\n4. 等待生效，你可以通过自己的域名来访问了🎉评论系统：example.yourdomain.com评论管理：example.yourdomain.com&#x2F;ui\nHTML 引入 (客户端)在你的网页中进行如下设置:\n1.导入 Waline 样式 https://unpkg.com/@waline/client@v3/dist/waline.css2. 创建 &lt;script&gt; 标签使用来自 https://unpkg.com/@waline/client@v3/dist/waline.js 的 init() 函数初始化，并传入必要的 el 与 serverURL 选项el 选项是 Waline 渲染使用的元素，你可以设置一个字符串形式的 CSS 选择器或者一个 HTMLElement 对象。serverURL 是服务端的地址，即上一步获取到的值。\n&lt;head&gt;  &lt;!-- ... --&gt;  &lt;link    rel=&quot;stylesheet&quot;    href=&quot;https://unpkg.com/@waline/client@v3/dist/waline.css&quot;  /&gt;  &lt;!-- ... --&gt;&lt;/head&gt;&lt;body&gt;  &lt;!-- ... --&gt;  &lt;div id=&quot;waline&quot;&gt;&lt;/div&gt;  &lt;script type=&quot;module&quot;&gt;    import &#123; init &#125; from &#x27;https://unpkg.com/@waline/client@v3/dist/waline.js&#x27;;    init(&#123;      el: &#x27;#waline&#x27;,      serverURL: &#x27;https://your-domain.vercel.app&#x27;,    &#125;);  &lt;/script&gt;&lt;/body&gt;\n\n3.评论服务此时就会在你的网站上成功运行 🎉评论管理 (管理端)1.部署完成后，请访问 &lt;serverURL&gt;&#x2F;ui&#x2F;register 进行注册。首个注册的人会被设定成管理员2.管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论3.用户也可通过评论框注册账号，登陆后会跳转到自己的档案页Next 的主题配置文件\n# Waline# For more information: https://waline.js.org, https://github.com/walinejs/walinewaline:  enable: true #是否开启  serverURL: waline-server-pearl.vercel.app # Waline #服务端地址，我们这里就是上面部署的 Vercel 地址  placeholder: 请文明评论 # #评论框的默认文字  avatar: mm # 头像风格  meta: [nick, mail, link] # 自定义评论框上面的三个输入框的内容  pageSize: 10 # 评论数量多少时显示分页  lang: zh-cn # 语言, 可选值: en, zh-cn  # Warning: 不要同时启用 `waline.visitor` 以及 `leancloud_visitors`.  visitor: false # 文章阅读统计  comment_count: true # 如果为 false , 评论数量只会在当前评论页面显示, 主页则不显示  requiredFields: [] # 设置用户评论时必填的信息，[nick,mail]: [nick] | [nick, mail]  libUrl: # Set custom library cdn url\n\n\n参考：Waline\n\n","categories":["Hexo"],"tags":["waline"]},{"title":"Chang Yan","url":"/posts/2025/07/changyan/","content":"畅言 （中国）畅言是业界领先的社交评论系统，同时支持 PC 端和移动端的访问方式，提供了一种全新的网站评论方式。畅言拥有多种常用账号登录、三重过滤机制、实时数据统计、数据快速导出、全面支持移动端等领先功能。完全满足各大网站的用户登录、评论、分享、审核需求。\n1. 创建账号或登录畅言，然后添加站点以获取 APP ID 和 APP KEY注册账户：\n用户类型:\n\n 通用网站用户（一般网站用户选择此项）\n CMS平台用户（WordPress，DedeCMS，Z-Blog 用户选择此选项）\n Android &amp; IOS用户（APP开发者选择此项）\n\n站点名称: *\n  XXX’s Blog\n\n请填写站点名称,不超过15个字\n\n站点类型:\n\n \n生活娱乐获取lite版:\n\n \n确认获取\n\n\n确定\n\n\n2.将取值 enable 设置为 true ，并将获取的 APP ID（ appid ）和 APP KEY（ appkey ）添加到 NexT 配置文件的 changyan Section 中，如下所示NexT 配置文件\n# Multiple Comment System Supportcomments:# Available values: tabs | buttonsstyle: tabs# Choose a comment system to be displayed by default.# Available values: disqus | disqusjs | changyan | livere | gitalk | utterancesactive: changyan# Setting `true` means remembering the comment system selected by the visitor.storage: true# Lazyload all comment systems.lazyload: false# Modify texts or order for any naves, here are some examples.nav:  #disqus:  #  text: Load Disqus  #  order: -1  #gitalk:  #  order: -2\n\n# changyanchangyan:  enable: false  appid:  appkey:  count: true\n\n注意：评论后，您需要一些时间才能看到评论数量的增加。\n\n","categories":["Hexo"],"tags":["chang-yan"]},{"title":"Github Hexo","url":"/posts/2025/07/github-hexo/","content":"GitHub + Hexo搭建个人免费博客网站本文介绍如何使用GitHub + Hexo搭建个人免费博客网站，所有内容亲测，绝对可用。\n一、准备工作GitHub账号需要有一个GitHub账号，没有的话到 官网 申请一个。注册很简单，不懂的话可以参考 GitHub申请账号\n安装Git在自己电脑上安装好Git，hexo部署到GitHub时要用。网上找篇教程或者参考 Git安装。\n安装NodeJS在自己电脑上安装好NodeJS，Hexo是基于NodeJS编写的，所以需要安装NodeJS和npm工具。网上找篇教程或者参考 NodeJS安装及配置。\n\n\n二、创建仓库在GitHub上创建一个新的代码仓库用于保存我们的网页。\n点击Your repositories，进入仓库页面。\n点击New按钮，进入仓库创建页面。\n填写仓库名，格式必须为&lt;用户名&gt;.github.io，然后点击Create repository。\n点击creating a new file创建一个新文件，作为我们网站的主页。\n新文件的名字必须为index.html，内容先随便写一个简单的，内容示例如下，填写之后点击Commit new file提交。\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;XXX&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;XXX的个人主页&lt;/h1&gt;    &lt;h1&gt;Hello World!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n\nGitHub 中找到我们主页的地址为 https:&#x2F;&#x2F;&lt;用户名&gt;.github.io&#x2F;\n浏览器中访问，展示成功。\n这里创建的网页是非常简单的，只是为了演示下GitHub 的使用方式。\n三、发布到GitHubnpm install hexo-deployer-git --save\n\n使用 SSH 密钥认证生成 SSH 密钥（如果之前没生成过）\nssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\n\n把公钥添加到 GitHub 账户复制~&#x2F;.ssh&#x2F;id_rsa.pub文件的内容。登录 GitHub，依次点击 Settings→SSH and GPG keys→New SSH key，粘贴公钥。更新 Hexo 配置文件把 deploy 部分的 repo 修改为 SSH 格式：\n编辑 nano _config.yml\ndeploy:  type: git  repo: &lt;git@github.com&gt;:&lt;用户名&gt;/&lt;用户名&gt;.github.io.git  branch: main\n\n验证 SSH 连接\nbashssh -T git@github.com\n要是看到Hi &lt;用户名&gt;! You’ve successfully authenticated…，就说明连接成功了。\n参考：本人博客\n","categories":["Hexo"],"tags":["github-hexo"]},{"title":"Hexo Links","url":"/posts/2025/07/hexo-links/","content":"Hexo 友情链接1. 创建友链hexo new page links\n\n2. 配置友链gedit themes/next/_config.yml  \n\nmenu:links: /links/ || fa fa-link\n\ngedit themes/next/languages/zh-CN.yml \n\nmenu:links: 友链\n\n\n3. 编辑友链gedit source/links/index.md\n\n---title: 友情链接author: Ma Jiangdate: 2025-07-11 14:39:28layout: pagelinks:  - name: Ma Jiang&#x27;s Blog    desc: Stay hungry,stay foolish.    link: https://majiang2025.github.io    avatar: https://majiang2025.github.io/images/favicon.png---&lt;style&gt; #links &#123; margin-top: 5rem; &#125;.links-content &#123; margin-top:1rem; &#125;.link-navigation &#123;  display: flex;  flex-wrap: wrap;  gap: 1rem;  justify-content: center;&#125;.card &#123;  width: 300px;  font-size: 1rem;  padding: 10px 20px;  border-radius: 4px;  transition-duration: 0.15s;  margin-bottom: 1rem;  display:flex;  background-color: #ffffff;  border: 1px solid #eaeaea;&#125;.card:hover &#123;  transform: scale(1.03);  box-shadow: 0 4px 12px rgba(0,0,0,0.08);&#125;.card .ava &#123;  width: 3rem!important;  height: 3rem!important;  margin:0!important;  margin-right: 1em!important;  border-radius:4px;  object-fit: cover;&#125;.card .card-header &#123;  width: 236px;&#125;.card .card-header a &#123;  color: #2bbc8a;  font-weight: bold;  text-decoration: none;&#125;.card .card-header a:hover &#123;  color: #d480aa;  text-decoration: none;&#125;.card .card-header .info &#123;  color:#a3a3a3;  font-size:14px;  white-space: nowrap;  text-overflow: ellipsis;  overflow: hidden;&#125;@media (max-width: 768px) &#123;  .card &#123;    width: 100%;    margin-left: auto;    margin-right: auto;  &#125;  .card .card-header &#123; width: calc(100% - 3rem - 1em); &#125;&#125;.with-love i &#123;  animation: heartBeat 1.5s infinite;  color: #ff4d6d;&#125;@keyframes heartBeat &#123;  0%, 100% &#123; transform: scale(1); &#125;  50% &#123; transform: scale(1.3); &#125;&#125;.note &#123;  padding: 1em;  margin: 1em 0;  border-radius: 4px;  position: relative;&#125;.note.warning &#123;  background-color: #fff6f6;  border-left: 4px solid #ff4d4f;&#125;.note.success &#123;  background-color: #f6ffed;  border-left: 4px solid #52c41a;&#125;/* 图片预优化（无后端时的替代方案） */.ava &#123;  /* 强制限制尺寸，避免图片过大 */  max-width: 48px;  max-height: 48px;  /* 压缩图片显示（视觉上缩小，实际文件大小不变） */  image-rendering: optimizeSpeed;&#125;/* 布局优化：避免重排重绘 */.card &#123;  display: flex;  align-items: center;  gap: 12px;  padding: 8px 0;  /* 固定高度，避免加载时布局跳动 */  min-height: 64px;&#125;/* 减少渲染阻塞：合并样式 */.card-header &#123;  flex: 1;&#125;.info &#123;  font-size: 12px;  color: #666;  /* 限制描述文字高度，避免占用过多空间 */  overflow: hidden;  text-overflow: ellipsis;  display: -webkit-box;  -webkit-line-clamp: 1;  -webkit-box-orient: vertical;&#125;&lt;/style&gt;&lt;div class=&quot;links-content&quot;&gt;&lt;div class=&quot;link-navigation&quot;&gt;&#123;% for link in links %&#125;&lt;div class=&quot;card&quot;&gt;  &lt;img    class=&quot;ava nomediumzoom&quot;    src=&quot;&#123;&#123; link.avatar &#125;&#125;&quot;    alt=&quot;&#123;&#123; link.name &#125;&#125;的头像&quot;    loading=&quot;lazy&quot;    width=&quot;48&quot;    height=&quot;48&quot;    style=&quot;object-fit: cover;&quot; /&gt;  &lt;div class=&quot;card-header&quot;&gt;    &lt;div&gt;&lt;a href=&quot;&#123;&#123; link.link &#125;&#125;&quot; target=&quot;_blank&quot;&gt; &#123;&#123; link.name &#125;&#125; &lt;/a&gt; &lt;/div&gt;    &lt;div class=&quot;info&quot;&gt;&#123;&#123; link.desc &#125;&#125;&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;&#123;% endfor %&#125;&lt;!-- 纯前端分页加载逻辑 --&gt;&lt;script&gt;  // 初始化：隐藏所有卡片，只显示首屏内容  document.addEventListener(&#x27;DOMContentLoaded&#x27;, () =&gt; &#123;    const cards = document.querySelectorAll(&#x27;.card&#x27;);    const visibleCount = 15; // 首屏显示数量（根据实际高度调整）    // 隐藏超出首屏的卡片    cards.forEach((card, index) =&gt; &#123;      if (index &gt;= visibleCount) &#123;        card.style.display = &#x27;none&#x27;;        card.dataset.hidden = &#x27;true&#x27;; // 标记为隐藏      &#125;    &#125;);    // 监听滚动，加载更多    window.addEventListener(&#x27;scroll&#x27;, loadOnScroll);  &#125;);  // 滚动加载函数  function loadOnScroll() &#123;    const hiddenCards = document.querySelectorAll(&#x27;.card[data-hidden=&quot;true&quot;]&#x27;);    if (hiddenCards.length === 0) &#123;      // 所有内容已加载，移除监听      window.removeEventListener(&#x27;scroll&#x27;, loadOnScroll);      return;    &#125;    // 当滚动到页面底部附近时加载    if (window.innerHeight + window.scrollY &gt;= document.body.offsetHeight - 500) &#123;      // 每次加载5张，避免一次性渲染过多      const toLoad = Array.from(hiddenCards).slice(0, 5);      toLoad.forEach(card =&gt; &#123;        card.style.display = &#x27;flex&#x27;; // 显示卡片        card.removeAttribute(&#x27;data-hidden&#x27;);      &#125;);    &#125;  &#125;&lt;/script&gt;&lt;/div&gt;------#### 留言换链友链格式：- name: Ma Jiang&#x27;s Blog  desc: Stay hungry,stay foolish.  link: &lt;https://majiang2025.github.io&gt;  avatar: &lt;https://majiang2025.github.io/images/favicon.png&gt;\n","categories":["Hexo"],"tags":["hexo-links"]}]